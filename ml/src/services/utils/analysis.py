import re
from transformers import AutoTokenizer, AutoModelForCausalLM

from data.regulations import regulation_documents
from data.roles import roles_documents
from src.schemas.analysis import AnswerSchema, ViolatedPhrase


model_id = "CohereForAI/c4ai-command-r-v01"
tokenizer = AutoTokenizer.from_pretrained(model_id)
model = AutoModelForCausalLM.from_pretrained(model_id)


async def splitting_dialog(text: str) -> (AnswerSchema, str):
    prompt = f"""
        У тебя есть текст переговоров на железной дороге. Твоя задача – разбить его на сущности (роли) и сформировать диалог в формате, где каждая реплика начинается с указания роли, говорящей эту реплику, и указывается получатель реплики. Важно: не изменяй и не добавляй ничего к исходному тексту, просто разбей его на реплики в соответствии с ролями.

        Основные роли:
        - ДСП (дежурный по станции)
        - ДНЦ (поездной диспетчер)
        - ПС (руководитель вагона путеизмерителя)
        - Составитель
        - ТЧМ (машинист)

        Инструкции:
        1. Роли в одной реплике должны отличаться (один человек не может сказать реплику сам себе).
        2. Если в начале реплики произносится фамилия (или фамилии, позывные (и сначала идет не машинист)), то это обращение к этой роли (ролям).
        3. Если в конце реплики упоминается фамилия или позывной, это тот, кто произнёс реплику.
        4. Машинист всегда должен повторить команду диспетчера и в начале назвать свою фамилию или позывной. (Для идентификации, изменять текст нельзя)
        5. Если в одной реплике упоминаются несколько ролей, необходимо разделить реплику между этими ролями.

        Пример исходного текста:
        Машинист поезда №2120 на 5-м пути станции К». Слушаю Вас, машинист поезда №2120 Иванов. Приказ №1 время 1:30 (один час, тридцать минут). Разрешаю поезду №2120 отправиться с 5-го пути по четному главному пути при запрещающем показании выходного светофора Ч5 и следовать до выхода на перегон со скоростью 20 км/час, а далее руководствоваться сигналами локомотивного светофора. ДСП Петрова. Понятно. Приказ №1 время 1:30 (один час, тридцать минут). Разрешаете поезду №2120 отправиться с 5-го пути по четному главному пути при запрещающем показании выходного светофора Ч5 и следовать до выхода на перегон со скоростью 20 км/час, а далее руководствоваться сигналами локомотивного светофора. Машинист поезда №2120 Иванов. Верно, выполняйте.

        Пример разбиения на роли:
        От кого: ДСП (дежурный по станции)
        Кому: ТЧМ (машинист)
        Реплика: Машинист поезда №2120 на 5-м пути станции К».

        От кого: ТЧМ (машинист)
        Кому: ДСП (дежурный по станции)
        Реплика: Слушаю Вас, машинист поезда №2120 Иванов.

        От кого: ДСП (дежурный по станции)
        Кому: ТЧМ (машинист)
        Реплика: Приказ №1 время 1:30 (один час, тридцать минут). Разрешаю поезду №2120 отправиться с 5-го пути по четному главному пути при запрещающем показании выходного светофора Ч5 и следовать до выхода на перегон со скоростью 20 км/час, а далее руководствоваться сигналами локомотивного светофора. ДСП Петрова.

        От кого: ТЧМ (машинист)
        Кому: ДСП (дежурный по станции)
        Реплика: Понятно. Приказ №1 время 1:30 (один час, тридцать минут). Разрешаете поезду №2120 отправиться с 5-го пути по четному главному пути при запрещающем показании выходного светофора Ч5 и следовать до выхода на перегон со скоростью 20 км/час, а далее руководствоваться сигналами локомотивного светофора. Машинист поезда №2120 Иванов.

        От кого: ДСП (дежурный по станции)
        Кому: ТЧМ (машинист)
        Реплика: Верно, выполняйте.

        Пример исходного текста с несколькими ролями:
        Составитель Иванов, машинист 34. Довожу план маневровой работы. С 1 пути 10 вагонов переставьте со стороны нечетной горловины на 2 путь и объедините с 15 вагонами. Вытягиваться будем по направлению четного пути с выездом за светофор М5, ДСП Петрова.

        Пример разбиения на роли с несколькими ролями:
        От кого: ДСП (дежурный по станции)
        Кому: Составитель, ТЧМ (машинист)
        Реплика: Составитель Иванов, машинист 34. Довожу план маневровой работы. С 1 пути 10 вагонов переставьте со стороны нечетной горловины на 2 путь и объедините с 15 вагонами. Вытягиваться будем по направлению четного пути с выездом за светофор М5. ДСП Петрова.

        Исходный текст:
        {text}

        Сформируй диалог в формате:
        От кого: Роль
        Кому: Роль
        Реплика: Текст реплики

        Важно: Не изменяй и не добавляй ничего к исходному тексту, просто разбей его на реплики в соответствии с ролями.
    """

    messages = [{"role": "user", "content": prompt}]

    input_ids = tokenizer.apply_chat_template(messages, tokenize=True, add_generation_prompt=True, return_tensors="pt")

    gen_tokens = model.generate(
        input_ids,
        documents=roles_documents,
        max_new_tokens=2000,
        do_sample=True,
        temperature=0.01,
    )

    completion = tokenizer.decode(gen_tokens[0])

    pattern = re.compile(r'От кого: (.*?)\nКому: (.*?)\nРеплика: (.*?)(?=\nОт кого:|$)', re.DOTALL)
    matches = pattern.findall(completion)
    dialog_text = ""

    for match in matches:
        fromWhom, toWhom, replica = match
        dialog_text = dialog_text + "От кого: " + fromWhom + "\nКому: " + toWhom + "\nРеплика: " + replica + "\n"

    print("LLV V1")
    print(dialog_text, end="\n\n")

    answer = AnswerSchema(
        negotiationText=dialog_text,
        violatedPhrases=[],
    )
    return answer, dialog_text


async def segment_violations(answer: AnswerSchema, dialog_text: str) -> AnswerSchema:
    prompt = f"""
        Ты руководитель железной дороги, который проверяет служебные переговоры своих подчиненных на основе регламента. 
        Твоя задача - выделять нарушения регламента в переговорах, происходящих на железной дороге, на основе переданного входного текста и согласно заданному регламенту.

        Регламент: Определены ключевые фразы, которые указывают на нарушение регламента. Эти ключевые фразы и их описания указаны в следующих документах:

        1. Степень. Упрощение:
            - не называется фамилия, должность работника или позывной;
            - сокращение установленных форм;
            - передача показаний светофоров по маршруту следования;
            - прочие упрощения установленного регламента, не указанные ниже

        1. Степень. Посторонние разговоры:
            - ведение разговоров, не относящихся к выполнению должностных обязанностей

        2. Степень. Нарушение порядка взаимоконтроля:
            - передача команды (сообщения) не лаконично (не четко, непонятно);
            - неубеждение в правильности восприятия команды;
            - неуказание места нахождения руководителя маневров при движении маневрового состава вагонами вперед;
            - нарушение руководителем маневров периодичности сообщений машинисту при движении вагонами вперед

        3. Степень. Нарушение порядка передачи указания, которое может привести к нарушению безопасности движения или травмированию:
            - передача указания по нерегистрируемым средствам связи (при наличии исправной регистрируемой связи);
            - непередача сообщения о неполном приготовлении маршрута;
            - непередача сообщения о расстоянии до сцепления с вагонами;
            - нарушение регламента переговоров при приеме, отправлении поезда при запрещающем показании входного или выходного светофоров (не указание литера светофора, номера приказа, фамилии ДСП, номера поезда, сведения о готовности маршрута...);
            - нарушение регламента служебных переговоров при производстве маневровой работы при запрещающем показании маневрового светофоров (не указание литера светофора, фамилии ДСП, номера поезда, сведения о готовности маршрута ...);
            - передача машинисту разрешения на отцепку локомотива без получения доклада о закреплении состава;
            - не указание сторонности закрепления подвижного состава;
            - передача разрешения на изъятие тормозных башмаков без получения доклада от машиниста о прицепке локомотива;
            - движение без получения команды от руководителя маневров

        Машинист всегда должен повторять команду диспетчера. Если он этого не выполнил - нарушение.

        Результат представляется в виде строк следующего формата:
        Фраза из текста: Текст с нарушением
        Описание: Степень. Дополнительный текст с информацией.

        Примечание: В одном тексте может быть несколько нарушений. Модель должна выделять все возможные нарушения из текста.

        Обратите внимание на контекст: не следует считать отсутствие нарушения там, где роль и позывной упоминаются корректно.

        Исходный текст: 
        {dialog_text}
    """

    messages = [{"role": "user", "content": prompt}]

    input_ids = tokenizer.apply_chat_template(messages, tokenize=True, add_generation_prompt=True, return_tensors="pt")

    gen_tokens = model.generate(
        input_ids,
        documents=regulation_documents,
        max_new_tokens=2000,
        do_sample=True,
        temperature=0.01,
    )

    completion = tokenizer.decode(gen_tokens[0])

    print("LLV V2")
    print(completion)

    pattern = r'Фраза из текста: (.*?)\nОписание: (.*?)\n'

    matches = re.findall(pattern, completion + "\n")

    violated_phrases_dict = {phrase: description for phrase, description in matches}
    violated_phrases_with_indices = {
        key: {
            "description": value,
            "start_index": dialog_text.find(key),
            "end_index": dialog_text.find(key) + len(key) if dialog_text.find(key) != -1 else -1
        }
        for key, value in violated_phrases_dict.items()
    }

    list_violatedPhrases = [
        ViolatedPhrase(
            beginIndex=int(violated_phrases_with_indices[key]["start_index"]),
            endIndex=int(violated_phrases_with_indices[key]["end_index"]),
            violatedRegulation=key,
            violatedText=violated_phrases_with_indices[key]["description"]
        ) for key in violated_phrases_with_indices
    ]
    answer.violatedPhrases = list_violatedPhrases
    return answer


async def generate_answer_from_text(text: str) -> AnswerSchema:
    sub_answer, dialog_text = await splitting_dialog(text)
    finally_answer = await segment_violations(sub_answer, dialog_text)
    return finally_answer
